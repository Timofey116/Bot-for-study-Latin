import telebot
from telebot import types
from secrets import secrets
import random
from dictionary import dictionary #–°–ª–æ–≤–∞—Ä—å
from mudrosti import file # –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
token = secrets.get('BOT_API_TOKEN')
bot = telebot.TeleBot(token)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_compliment_index = {}
user_received_compliments = {}
user_card_state = {}

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏.
#message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    action_buttons = [
        types.KeyboardButton("‚öîÔ∏èAuxilium"),
        types.KeyboardButton("üìúData verbum"),
        types.KeyboardButton("üè∫Informatio"),
        types.KeyboardButton("üê∫–°itatus")
    ]
    markup.add(*action_buttons)

    bot.send_message(
        message.chat.id,
        text=f"Salve, discipulus(a) {message.from_user.first_name} üëã\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.\n–ò—Ö –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç (–ø–ª–∏—Ç–∫–∏) —Ä—è–¥–æ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
        reply_markup=markup
    )

@bot.message_handler(content_types=['text'])
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏.
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.
def buttons(message):#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
    if message.text == "‚öîÔ∏èAuxilium":
        bot.send_message(message.chat.id, text="–í—ã –≤—ã–∑–≤–∞–ª–∏ –ø–æ–º–æ—â—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –ª–µ–≥–∏–æ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç—ã.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ñ–ª–µ—à-–∫–∞—Ä—Ç—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìúData verbum.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–µ–∫—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \nüè∫Informatio.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä—ã–ª–∞—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üê∫–°itatus")

    elif message.text == "üìúData verbum":# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç (—Ñ–ª–µ—à-–∫–∞—Ä—Ç—É) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        index = random.randint(0, len(dictionary) - 1)
        user_compliment_index[message.chat.id] = index
        user_card_state[message.chat.id] = "front"
        send_compliment(message.chat.id, index)
    elif message.text == "üè∫Informatio":
        bot.send_message(message.chat.id, text="–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏-–∏—Å—Ç–æ—Ä–∏–∫–∞–º–∏ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ-–ø—Ä–æ—Å–≤–µ—Ç–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª—è—Ö")
    elif message.text == "üê∫–°itatus":
        random_file = random.choice(file)
        with open(random_file, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    else:
        bot.send_message(message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

@bot.callback_query_handler(func=lambda call: True)#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
#–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏, —Ñ—É–Ω–∫—Ü–∏—è –ª–∏–±–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–º, –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
#call: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
def callback_query(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    if call.data == "flip":
        if user_id in user_received_compliments and message_id in user_received_compliments[user_id]:
            user_received_compliments[user_id][message_id]["state"] = "back" if user_received_compliments[user_id][message_id]["state"] == "front" else "front"
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text=get_compliment_part(user_received_compliments[user_id][message_id]["index"], user_received_compliments[user_id][message_id]["state"]),
                reply_markup=create_inline_markup()
            )

def send_compliment(chat_id, index):
#–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
#–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å.
#–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
#Args:
        #chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç.
        #index: –ò–Ω–¥–µ–∫—Å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ.
    if chat_id not in user_received_compliments:
        user_received_compliments[chat_id] = {}
    text = get_compliment_part(index, "front")
    sent_message = bot.send_message(chat_id, text=text, reply_markup=create_inline_markup())
    user_received_compliments[chat_id][sent_message.message_id] = {"index": index, "state": "front", "text": text}


def get_compliment_part(index, state):
    compliment = dictionary[index]
    parts = compliment.split('\n', 1)
    return parts[0] if state == "front" else parts[1] if len(parts) > 1 else "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
#–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ª–∏—Ü–µ–≤–∞—è –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).
#–†–∞–∑–¥–µ–ª—è–µ—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
#Args:
        #index: –ò–Ω–¥–µ–∫—Å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ.
        #state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ('front' –∏–ª–∏ 'back').
#Returns:
        #str: –õ–∏—Ü–µ–≤–∞—è –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞.


def create_inline_markup(): #–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏.
    #Returns:
        #InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π.
    markup = types.InlineKeyboardMarkup()
    flip_button = types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="flip")
    markup.add(flip_button)
    return markup

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)